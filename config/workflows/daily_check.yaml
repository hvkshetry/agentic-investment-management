# Daily Portfolio Check Workflow
# Morning monitoring and alert generation

workflow: daily_check
description: Daily portfolio monitoring and risk assessment
schedule: daily  # Run every market day at 9:00 AM ET
guidelines:
  target_tokens: 30000  # Lighter weight daily check

# Lighter weight than full rebalancing
sub_agents_sequence:
  - id: portfolio_import
    name: portfolio-manager
    task: |
      Import portfolio data from CSV files:
      1. Read Vanguard CSV from /mnt/c/Users/hvksh/investing/portfolio/vanguard.csv
      2. Import using mcp__portfolio-state-server__import_broker_csv with broker="vanguard"
      3. Read UBS CSV from /mnt/c/Users/hvksh/investing/portfolio/ubs.csv  
      4. Import using mcp__portfolio-state-server__import_broker_csv with broker="ubs"
      Note: Portfolio state server starts empty on each initialization.
    outputs: [import_confirmation]
    required_tools: [Read, mcp__portfolio-state-server__import_broker_csv]
    acceptance:
      must_complete: [vanguard_import, ubs_import]
      
  - id: market_scan
    name: market-scanner
    task: |
      Scan overnight developments, news, and policy events.
      Check for material changes affecting portfolio holdings.
      Create market_scan.json with key developments and sentiment.
    outputs: [market_scan]
    depends_on: [portfolio_import]
    required_tools: [mcp__openbb-curated__news_company, mcp__policy-events-service__get_recent_bills]
    acceptance:
      must_have_fields: [sentiment, key_events, affected_holdings, monitor_list]
      
  - id: portfolio_check
    name: portfolio-manager
    task: |
      Get current portfolio state and calculate overnight changes.
      Check for drift from target allocations. Create portfolio_check.json
      with current metrics and any drift alerts.
    outputs: [portfolio_check]
    depends_on: [portfolio_import]
    required_tools: [mcp__portfolio-state-server__get_portfolio_state]
    acceptance:
      must_have_fields: [total_value, daily_change, allocation_drift, alerts]
      
  - id: risk_check
    name: risk-analyst
    task: |
      Quick risk assessment focusing on VaR and concentration.
      Read portfolio_check.json and market_scan.json.
      Create risk_check.json with current risk metrics.
    outputs: [risk_check]
    depends_on: [portfolio_check, market_scan]
    gates: [risk_alert]
    acceptance:
      must_have_fields: [var_95, max_position_weight, risk_alerts]
      
  - id: daily_note
    name: portfolio-manager
    task: |
      Generate daily PM note summarizing portfolio status, market conditions,
      and any required actions. Create daily_note.md for user review.
    outputs: [daily_note]
    depends_on: [market_scan, portfolio_check, risk_check]
    acceptance:
      must_have_fields: [portfolio_summary, market_summary, action_items]

# Lighter gates for monitoring (not trading)
gates:
  risk_alert:
    description: Risk monitoring thresholds
    checks:
      - var_95 <= max_daily_var_alert  # Higher threshold for alerts
      - max_position_weight <= position_concentration_alert
      
# Action triggers
triggers:
  rebalance_needed:
    conditions:
      - allocation_drift > 0.05  # 5% drift
      - OR: var_95 > max_daily_var_95
      - OR: days_since_rebalance > 30
    action: trigger_workflow('rebalance_tlh')
    
  immediate_attention:
    conditions:
      - risk_alerts contains 'CRITICAL'
      - OR: daily_loss > 0.05  # 5% daily loss
    action: send_alert('user', 'IMMEDIATE ATTENTION REQUIRED')

# Reporting
reporting:
  generate_daily_note: true
  email_if_alerts: true
  archive_artifacts: true