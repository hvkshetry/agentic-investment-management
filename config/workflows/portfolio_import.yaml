# Portfolio Import Workflow
# Imports portfolio data from broker CSV files

workflow: portfolio_import
description: Import portfolio data from Vanguard and UBS CSV files
schedule: on_demand  # Run manually or when MCP server restarts
guidelines:
  target_tokens: 10000  # Simple import process

# Portfolio data sources
data_sources:
  vanguard:
    file_path: /mnt/c/Users/hvksh/investing/portfolio/vanguard.csv
    broker: vanguard
    account_id: "30433360"  # If known, can be specified
    
  ubs:
    file_path: /mnt/c/Users/hvksh/investing/portfolio/ubs.csv
    broker: ubs
    account_id: "NE_55344"  # If known, can be specified

# Import sequence
sub_agents_sequence:
  - id: clear_state
    name: portfolio-manager
    task: |
      Verify portfolio state server is running and ready.
      Note: Server always starts with empty state on initialization.
      Get initial state to confirm it's empty or needs refresh.
    outputs: [initial_state]
    required_tools: [mcp__portfolio-state-server__get_portfolio_state]
    
  - id: import_vanguard
    name: portfolio-manager
    task: |
      Import Vanguard portfolio:
      1. Read CSV file from /mnt/c/Users/hvksh/investing/portfolio/vanguard.csv
      2. Call mcp__portfolio-state-server__import_broker_csv with:
         - broker="vanguard"
         - csv_content=<full CSV content>
         - account_id="30433360" (if known)
      3. Verify import success
    outputs: [vanguard_import_result]
    depends_on: [clear_state]
    required_tools: [Read, mcp__portfolio-state-server__import_broker_csv]
    acceptance:
      import_successful: true
      positions_count: ">0"
      
  - id: import_ubs
    name: portfolio-manager
    task: |
      Import UBS portfolio:
      1. Read CSV file from /mnt/c/Users/hvksh/investing/portfolio/ubs.csv
      2. Call mcp__portfolio-state-server__import_broker_csv with:
         - broker="ubs"
         - csv_content=<full CSV content>
         - account_id="NE_55344" (if known)
      3. Verify import success
    outputs: [ubs_import_result]
    depends_on: [import_vanguard]
    required_tools: [Read, mcp__portfolio-state-server__import_broker_csv]
    acceptance:
      import_successful: true
      positions_count: ">0"
      
  - id: verify_portfolio
    name: portfolio-manager
    task: |
      Get complete portfolio state and verify both accounts imported:
      1. Call mcp__portfolio-state-server__get_portfolio_state
      2. Verify positions from both accounts are present
      3. Check total portfolio value is reasonable (>$1M expected)
      4. Create portfolio_import_summary.json with:
         - Total positions count
         - Total portfolio value
         - Asset allocation breakdown
         - Accounts imported
    outputs: [portfolio_import_summary]
    depends_on: [import_vanguard, import_ubs]
    required_tools: [mcp__portfolio-state-server__get_portfolio_state, Write]
    acceptance:
      must_have_fields: [positions, tax_lots, total_value, asset_allocation]
      total_value: ">1000000"  # Expected portfolio size
      position_count: ">40"     # Expected number of positions

# Validation checks
validation:
  check_duplicates:
    description: Ensure no duplicate positions across accounts
    method: Check that position quantities match expected values
    
  check_completeness:
    description: Verify all expected securities imported
    expected_securities:
      - VOO  # Core equity
      - VTI  # Total market
      - VWLUX # Muni bonds
      - VMLUX # Muni bonds
      
  check_values:
    description: Sanity check portfolio values
    checks:
      - total_value > 1000000
      - position_count > 40
      - equity_allocation between 0.5 and 0.9
      - bond_allocation between 0.1 and 0.4

# Error handling
error_handling:
  csv_not_found:
    action: Report error and provide instructions for placing CSV files
    message: "Please ensure CSV files are in /mnt/c/Users/hvksh/investing/portfolio/"
    
  import_failed:
    action: Retry with error details
    max_retries: 2
    
  validation_failed:
    action: Report discrepancies and continue with available data
    log_level: WARNING

# Reporting
reporting:
  generate_summary: true
  summary_format: |
    # Portfolio Import Summary
    
    **Date:** {{ date }}
    **Status:** {{ status }}
    
    ## Accounts Imported
    - Vanguard: {{ vanguard_status }} ({{ vanguard_positions }} positions)
    - UBS: {{ ubs_status }} ({{ ubs_positions }} positions)
    
    ## Portfolio Overview
    - **Total Value:** ${{ total_value }}
    - **Total Positions:** {{ position_count }}
    - **Equity Allocation:** {{ equity_percent }}%
    - **Bond Allocation:** {{ bond_percent }}%
    - **Cash:** {{ cash_percent }}%
    
    ## Data Quality
    - **Tax Lots:** {{ tax_lot_count }}
    - **Missing Prices:** {{ missing_prices }}
    - **Warnings:** {{ warnings }}

# Notes
notes:
  - Portfolio state server always starts empty on initialization
  - Import must be run after any server restart
  - CSV format must match broker-specific parser requirements
  - Account IDs help with multi-account disambiguation