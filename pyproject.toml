[tool.poetry]
name = "agentic-investment-management"
version = "0.2.0"
description = "Personal investment management system with MCP servers"
authors = ["Your Name <your.email@example.com>"]
readme = "README.md"
python = "^3.10"

[tool.poetry.dependencies]
python = "^3.10"

# MCP Framework
fastmcp = "^0.1.0"

# Market Data & Financial Libraries
openbb = "^4.0.0"
yfinance = "^0.2.40"
pandas = "^2.0.0"
numpy = "^1.24.0"

# Portfolio Optimization
PyPortfolioOpt = "^1.5.5"
Riskfolio-Lib = "^6.0.0"
cvxpy = "^1.4.0"
bt = "^0.2.10"
pulp = "^2.7.0"

# Statistical & ML
scipy = "^1.10.0"
scikit-learn = "^1.3.0"
statsmodels = "^0.14.0"

# Tax Calculations
tenforty = "^2024.0.0"

# Performance Analytics
quantstats = "^0.0.62"
empyrical = "^0.5.5"

# Utilities
pydantic = "^2.0.0"
PyYAML = "^6.0"
filelock = "^3.12.0"
httpx = "^0.27.0"

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.0"
pytest-asyncio = "^0.21.0"
pytest-cov = "^4.1.0"
hypothesis = "^6.90.0"
mypy = "^1.5.0"
ruff = "^0.1.0"
black = "^23.0.0"
ipython = "^8.0.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
line-length = 100
target-version = "py310"
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
addopts = "-v --tb=short"

[tool.coverage.run]
source = ["shared", "oracle", "portfolio_state", "risk_server", "portfolio_server", "tax_server"]
omit = ["*/tests/*", "*/test_*.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if __name__ == .__main__.:",
    "raise NotImplementedError",
    "pass",
    "except ImportError:",
]